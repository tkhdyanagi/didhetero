.inorder = TRUE,
.packages = packages) %dopar% {
# Original estimates
est_temp <- Estimate %>%
filter(g == g1, t == t1, z == z1) %>%
pull(est)
# Bootstrap DR estimates
mb_est_temp <-
mean(mb_weight[boo_z1, mb] * A_g_t[boo_z1, id_z, id_gt])
# Bootstrap residuals
mb_res_temp <- mb_est_temp - est_temp
# Return
return(cbind(g1, t1, z1, mb, mb_est_temp, mb_res_temp))
}
# Names
colnames(mb_result_temp) <- c("g", "t", "z", "mb", "mb_est", "mb_res")
rownames(mb_result_temp) <- NULL
# as.data.frame
mb_result_temp <- as.data.frame(mb_result_temp)
# Multiplier bootstrap empirical quantiles
q025 <- stats::quantile(x = mb_result_temp$mb_res, probs = 0.25)
q075 <- stats::quantile(x = mb_result_temp$mb_res, probs = 0.75)
# Multiplier bootstrap point-wise standard error
mb_se[id_z, id_gt] <- (q075 - q025) / (stats::qnorm(0.75) - stats::qnorm(0.25))
# Multiplier bootstrap t-test statistics
mb_result_temp <- mb_result_temp %>%
mutate(mb_t_stat = mb_res / mb_se[id_z, id_gt]) %>%
select(g, t, z, mb, mb_est, mb_res, mb_t_stat)
# Save the bootstrap results
mb_result <- rbind(mb_result, mb_result_temp)
}
}
# Names
colnames(mb_result) <- c("g", "t", "z", "mb", "mb_est", "mb_res", "mb_t_stat")
rownames(mb_result) <- NULL
# as.data.frame
mb_result <- as.data.frame(mb_result)
# Max-t-test statistics over z
max_t_stat1 <- mb_result %>%
group_by(g, t, mb) %>%
mutate(max_t_stat = max(abs(mb_t_stat)))
# Max-t-test statistics over (g, t, z)
max_t_stat2 <- mb_result %>%
group_by(mb) %>%
mutate(max_t_stat = max(abs(mb_t_stat)))
# Uniform critical values over z
mb_cv1 <- max_t_stat1 %>%
group_by(g, t) %>%
summarize(mb_cv = stats::quantile(max_t_stat, probs = 1 - alp), .groups = "keep") %>%
ungroup() %>%
pull(mb_cv)
# Uniform critical values over (g, t, z)
mb_cv2 <- max_t_stat2 %>%
pull(max_t_stat) %>%
stats::quantile(probs = 1 - alp)
# UCB over (g, t, z) or over z
if (unifgtz) {
ci_lower <- Estimate$est - mb_cv2 * c(mb_se)
ci_upper <- Estimate$est + mb_cv2 * c(mb_se)
} else {
ci_lower <- Estimate$est - rep(mb_cv1, each = num_zeval) * c(mb_se)
ci_upper <- Estimate$est + rep(mb_cv1, each = num_zeval) * c(mb_se)
}
#-----------------------------------------------------------------------------
# Results
#-----------------------------------------------------------------------------
Estimate <- Estimate %>%
mutate(se = c(mb_se),
ci_lower = ci_lower,
ci_upper = ci_upper) %>%
select(g, t, z, est, se, ci_lower, ci_upper)
#-----------------------------------------------------------------------------
# Figures
#-----------------------------------------------------------------------------
Figure <- list()
for (id_gt in 1:num_gteval) {
# Specify the values of (g, t)
if (is.vector(gteval)) {
g1 <- gteval[1]
t1 <- gteval[2]
} else if (is.matrix(gteval)) {
g1 <- gteval[id_gt, 1]
t1 <- gteval[id_gt, 2]
}
# Figure for multiplier bootstrap UCB
Figure[[paste0("g", g1, "_t", t1)]] <- graph_func_discrete(Estimate = Estimate,
g1 = g1,
t1 = t1)
}
Estimate
mb_cv2
mb_cv1
unifgtz
rep(mb_cv1, each = num_zeval)
devtools::document()
devtools::document()
devtools::install()
devtools::document()
devtools::document()
devtools::install()
devtools::check(remote = TRUE, manual = TRUE)
devtools::document()
devtools::install()
devtools::check(remote = TRUE, manual = TRUE)
devtools::check(remote = TRUE, manual = TRUE)
devtools::document()
devtools::install()
devtools::check(remote = TRUE, manual = TRUE)
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
devtools::document()
devtools::install()
pkgdown::build_site()
pkgdown::build_site()
devtools::check(remote = TRUE, manual = TRUE)
devtools::install()
devtools::build()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::check(remote = TRUE, manual = TRUE)
devtools::install()
devtools::build()
devtools::document()
devtools::install()
devtools::build()
devtools::check(remote = TRUE, manual = TRUE)
devtools::install()
devtools::document()
pkgdown::build_site()
pkgdown::build_site()
devtools::document()
pkgdown::build_site()
devtools::check(remote = TRUE, manual = TRUE)
0.24 / 900
sqrt(0.24 / 900)
0.24 * 899 / 900
522/900
devtools::build()
0.58 - 0.58^2
0.2436 / 900
sqrt(0.2436 / 900)
0.58 - 1.96 * sqrt(0.2436 / 900)
0.58 + 1.96 * sqrt(0.2436 / 900)
(0.58 - 0.5) / sqrt(0.2436 / 900)
devtools::document()
devtools::install()
devtools::document()
pkgdown::build_site()
devtools::check(remote = TRUE, manual = TRUE)
devtools::build()
devtools::document()
devtools::build()
devtools::document()
devtools::build()
devtools::install()
devtools::document()
devtools::install()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::check(remote = TRUE, manual = TRUE)
devtools::document()
devtools::build()
devtools::install()
seq(-1, 1, length = 5)
devtools::document()
devtools::install()
devtools::check(remote = TRUE, manual = TRUE)
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
devtools::install()
devtools::build()
devtools::documen()
devtools::document()
devtools::install()
devtools::install()
devtools::document()
devtools::install()
install.packages("dplyr")
devtools::install()
devtools::document()
devtools::document()
devtools::install()
devtools::install()
kappa <- (sqrt(5) + 1) / 2
kappa * kappa/sqrt(5) + (kappa + 1) * (1 - kappa/sqrt(5))
(kappa - 1) * kappa/sqrt(5) + kappa * (1 - kappa/sqrt(5))
(1 - kappa) * kappa/sqrt(5) + kappa * (1 - kappa/sqrt(5))
(2 - kappa) * kappa/sqrt(5) + (1 + kappa) * (1 - kappa/sqrt(5))
devtools::document()
devtools::install()
devtools::install()
devtools::install()
devtools::install()
devtools::document()
devtools::check(remote = TRUE, manual = TRUE)
devtools::install()
devtools::install()
devtools::install()
devtools::document()
devtools::install()
devtools::install()
devtools::install()
devtools::install()
devtools::install()
data <- didhetero::datageneration(n = 100000, tau = 4, continuous FALSE)
data <- didhetero::datageneration(n = 100000, tau = 4, continuous = FALSE)
ibrary(dplyr)
library(dplyr)
G <- data %>%
filter(period == 1) %>%
pull(G)
table(G)
G <- data %>%
filter(period == 1) %>%
filter(Z == 1)
pull(G)
table(G)
G <- data %>%
filter(period == 1) %>%
filter(Z == 1) %>%
pull(G)
table(G)
G <- data %>%
filter(period == 1) %>%
filter(Z == -1) %>%
pull(G)
table(G)
G <- data %>%
filter(period == 1) %>%
filter(Z == 0) %>%
pull(G)
table(G)
cbind(1, 2, 3, 4)
rbind(cbind(1, 2, 3, 4), cbind(1, 2, 3, 4))
devtools::load_all()
set.seed(1)
data <- datageneration(n = 1000, tau = 4, continuous = FALSE)
est <- catt_gt_discrete(yname = "Y",
tname = "period",
idname = "id",
gname = "G",
zname = "Z",
xformla = ~ Z,
data = data,
zeval = seq(-1, 1, by = 0.5),
gteval = c(2, 2),
control_group = "nevertreated",
anticipation = 0,
alp = 0.05,
biters = 1000,
unifgtz = FALSE,
cores = 1)
devtools::load_all()
set.seed(1)
data <- datageneration(n = 1000, tau = 4, continuous = FALSE)
est <- catt_gt_discrete(yname = "Y",
tname = "period",
idname = "id",
gname = "G",
zname = "Z",
xformla = ~ Z,
data = data,
zeval = seq(-1, 1, by = 1),
gteval = c(2, 2),
control_group = "nevertreated",
anticipation = 0,
alp = 0.05,
biters = 1000,
unifgtz = FALSE,
cores = 1)
est$Estimate
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::install()
devtools::document()
devtools::document()
devtools::install()
pkgdown::build_site()
pkgdown::build_site()
devtools::check()
devtools::check(remote = TRUE, manual = TRUE)
devtools::install()
devtools::document()
devtools::install()
a <- cbind(1:3, 1:3, 1:3)
a
c(a)
devtools::document()
devtools::install()
devtools::install()
kappa <- (sqrt(5) + 1) / 2
(2 - kappa) * kappa/sqrt(5) + (1 + kappa) * (1 - kappa/sqrt(5))
devtools::document()
devtools::install()
rep(1, each = 2)
rep(1:3, each = 2)
devtools::install()
(stats::qnorm(0.75) - stats::qnorm(0.25))
devtools::load_all()
data <- datageneration(n = 1000, tau = 4, continuous = FALSE)
data %>%
filter(G == 1) %>%
a
data %>%
filter(period == 1) %>%
pull(G) %>%
table()
data %>%
filter(period == 1) %>%
filter(G == 2) %>%
pull(Z) %>%
table()
devtools::document()
devtools::install()
devtools::install()
devtools::document()
devtools::install()
devtools::install()
devtools::install()
devtools::install()
devtools::document()
devtools::install()
devtools::install()
rep(0.2, 5)
c(-2, -1, 0, 1, 2)
c(-2, -1, 0, 1, 2)
devtools::document()
devtools::install()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::check(remote = TRUE, manual = TRUE)
devtools::document()
devtools::install()
devtools::check(remote = TRUE, manual = TRUE)
devtools::install()
help(vcov)
devtools::document()
devtools::load_all()
data <- datageneration(n = 1000, tau = 4, continuous = FALSE)
devtools::install()
devtools::document()
devtools::document()
devtool;s
devtools::install()
data <- datageneration(n = 1000, tau = 4, continuous = FALSE)
yname = "Y"
tname = "period"
idname = "id"
gname = "G"
zname = "Z"
xformla = ~ Z
data = data
zeval = c(-1, 0, 1)
gteval = c(2, 2)
control_group = "nevertreated"
anticipation = 0
alp = 0.05
biters = 1000
uniformall = FALSE
cores = 1
# Basic variables
data <- data %>%
mutate(Y = UQ(sym(yname)),
period = UQ(sym(tname)),
id = UQ(sym(idname)),
G = UQ(sym(gname)),
Z = UQ(sym(zname))) %>%
arrange(id, period)
devtools::load_all()
# Basic variables
data <- data %>%
mutate(Y = UQ(sym(yname)),
period = UQ(sym(tname)),
id = UQ(sym(idname)),
G = UQ(sym(gname)),
Z = UQ(sym(zname))) %>%
arrange(id, period)
# Evaluation points (g, t)
supp_g <- data$G %>%
unique() %>%
sort()
supp_t <- data$period %>%
unique() %>%
sort()
period1 <- supp_t[1]
geval <- intersect(supp_g, supp_g + anticipation) %>%
setdiff(0)
teval <- intersect(supp_t, supp_t - anticipation) %>%
setdiff(period1)
gbar <- max(supp_g)
if (is.null(gteval)) {
for (g1 in geval) {
for (t1 in teval) {
if (control_group == "nevertreated") {
if (t1 >= g1 - anticipation) {
gteval <- rbind(gteval, c(g1, t1))
}
} else if (control_group == "notyettreated") {
if (t1 >= g1 - anticipation & t1 < gbar - anticipation) {
gteval <- rbind(gteval, c(g1, t1))
}
}
}
}
}
# Number of evaluation points (g, t)
if (is.vector(gteval)) {
num_gteval <- 1
uniformall <- FALSE
} else if (is.matrix(gteval)) {
num_gteval <- nrow(gteval)
}
# Number of individuals
n <- length(unique(data$id))
# Number of zeval
zeval <- sort(zeval)
num_zeval <- length(zeval)
# Variables used for parallel computing
cluster <- parallel::makeCluster(cores)
doParallel::registerDoParallel(cluster, cores = cores)
packages <- c("dplyr")
# Matrix of the estimates and uniform confidence bands
Estimate <- NULL
# A_g_t
A_g_t <- array(NA, dim = c(n, num_zeval, num_gteval))
# Number of evaluation points (g, t) and vector of evaluation points g's
if (is.vector(gteval)) {
num_gteval <- 1
geval <- gteval[1]
} else if (is.matrix(gteval)) {
num_gteval <- nrow(gteval)
geval <- gteval[, 1] %>%
unique() %>%
sort()
}
# Number of individuals
n <- length(unique(data$id))
n
geval
g <- 2
# Subset of data with G == g | G == 0
data1 <- data %>%
filter(period == period1) %>%
filter(G == g | G == 0) %>%
mutate(G_g = ifelse(G == g, 1, 0))
# Indicator 1{G = g}
G_g <- data1$G_g
# Covariates
covariates <- stats::model.matrix(xformla, data = data1)
# Dimension of covariates
dim_X <- ncol(covariates)
# Logit estimation
logit <- stats::glm(G_g ~ covariates - 1,
family = stats::binomial(link = logit))
# Estimated coefficients in logit estimation
pi_coef <- logit$coefficients
GPS_coef <- rbind(GPS_coef, c(g, pi_coef))
GPS <- GPS_coef <- GPS_inffunc <- NULL
# Subset of data with G == g | G == 0
data1 <- data %>%
filter(period == period1) %>%
filter(G == g | G == 0) %>%
mutate(G_g = ifelse(G == g, 1, 0))
# Indicator 1{G = g}
G_g <- data1$G_g
# Covariates
covariates <- stats::model.matrix(xformla, data = data1)
# Dimension of covariates
dim_X <- ncol(covariates)
# Logit estimation
logit <- stats::glm(G_g ~ covariates - 1,
family = stats::binomial(link = logit))
# Estimated coefficients in logit estimation
pi_coef <- logit$coefficients
GPS_coef <- rbind(GPS_coef, c(g, pi_coef))
# Influence functions in logit estimation
GPS_fit <- as.vector(logit$fitted.values)
score_GPS <- (G_g - GPS_fit) * covariates
Hessian_GPS <- stats::vcov(logit) * n
asy_lin_rep_GPS <- score_GPS %*% Hessian_GPS
asy_lin_rep_GPS
Hessian_GPS
score_GPS
GPS_fit
asy_lin_rep_GPS
devtools::install()
devtools::document()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::check(remote = TRUE, manual = TRUE)
devtools::check(remote = TRUE, manual = TRUE)
devtools::install()
devtools::install()
devtools::document()
pkgdown::build_site()
pkgdown::build_site()
devtools::install()
devtools::check(remote = TRUE, manual = TRUE)
devtools::build()
